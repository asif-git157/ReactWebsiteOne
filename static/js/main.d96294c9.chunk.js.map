{"version":3,"sources":["../../../my-app/src/components/Navbar.js","../../../my-app/src/components/TextForm.js","../../../my-app/src/components/About.js","../../../my-app/src/components/Alert.js","../../../my-app/src/App.js","../../../my-app/src/reportWebVitals.js","../../../my-app/src/index.js"],"names":["Navbar","props","React","createElement","className","concat","mode","href","title","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","onClick","toggleMode","role","htmlFor","TextForm","_useState","useState","_useState2","_slicedToArray","text","setText","style","color","heading","value","onChange","event","console","log","target","backgroundColor","rows","newText","toUpperCase","showAlert","toLowerCase","split","length","About","paddingBottom","myStyle","setMyStyle","_useState3","_useState4","btnText","setBtnText","aria-labelledby","data-bs-parent","Alert","alert","word","lower","charAt","slice","capitalize","msg","prototype","PropTypes","string","defaultProps","App","setMode","setAlert","message","setTimeout","Fragment","document","body","BrowserRouter","Routes","Route","path","element","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.d96294c9.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/about\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\" role=\"search\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    <div className={`form-check form-switch text-${props.mode==='light'?'dark':'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable dark mode</label>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {\r\n    title: PropTypes.string,\r\n    aboutText: PropTypes.string\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"Set Title Here\",\r\n    aboutText: \"About Text Here\"\r\n}\r\n","import React, {useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n     const handleUpClick = ()=>{\r\n        console.log(\"Uppercase button was clicked\");\r\n        let newText = text.toUpperCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Uppercase\", \"success\");\r\n     }\r\n\r\n     const handleLoClick = ()=>{\r\n        console.log(\"Lower case button was clicked\");\r\n        let newText = text.toLowerCase();\r\n        setText(newText)\r\n        props.showAlert(\"Converted to Lowercase\", \"success\");\r\n     }\r\n\r\n     const handleClearClick = ()=>{\r\n        let newText = '';\r\n        setText(newText)\r\n     }\r\n\r\n     const handleOnChange = (event)=>{\r\n        console.log(\"handle On Change Called\");\r\n        setText(event.target.value);\r\n     }\r\n \r\n     const [text, setText] = useState('Enter text here');\r\n    return (\r\n        <div>\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'?'grey':'white', color: props.mode==='dark'?'white':'black'}} id=\"myBox\" rows=\"8\"></textarea>\r\n                    <button className=\"btn btn-primary my-3\" onClick={handleUpClick}>Convert to upper case</button>\r\n                    <button className=\"btn btn-primary my-3 mx-2\" onClick={handleLoClick}>Convert to lower case</button>\r\n                    <button className=\"btn btn-primary my-3 mx-2\" onClick={handleClearClick}>Clear Text</button>\r\n                </div>\r\n            </div>\r\n\r\n            <div className=\"container my-3\" style={{color: props.mode==='dark'?'white':'black'}}>\r\n            <h3>Your Text Summary</h3>\r\n            <p>{text.split(\" \").length} words and {text.length} characters.</p>\r\n            <p className=\"my-80\">It will take {0.008 * text.split(\" \").length} minutes to read.</p>\r\n            <h3>Preview</h3>\r\n            <p>{text.length>0?text:\"Enter something in the textbox above to preview here\"}</p>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function About() {\r\n    let myStyleBorder = {\r\n        borderTop: '1px solid 3px'\r\n    }\r\n    const [myStyle, setMyStyle] = useState({\r\n        color: 'black',\r\n        backgroundColor: 'white',\r\n        paddingBottom: '30px'\r\n    })\r\n\r\n    const [btnText, setBtnText] = useState('Enable light mode')\r\n\r\n\r\n        const toggleStyle = ()=>{\r\n            if (myStyle.color === 'black') {\r\n                setMyStyle({\r\n                    color: 'white',\r\n                    backgroundColor: 'black'\r\n                })\r\n                setBtnText(\"Enable Light mode\");\r\n            } \r\n            else {\r\n                setMyStyle({\r\n                    color: 'black',\r\n                    backgroundColor: 'white'\r\n                })\r\n                setBtnText(\"Enable Dark mode\");\r\n            }\r\n        }\r\n    return (\r\n        <div className=\"container mb-5 pb-3\" style={myStyle}>\r\n            <h1 className=\"mt-5 \">Our Features</h1>\r\n            <div className=\"accordion\" id=\"accordionExample\" style={myStyle}>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                        <button className=\"accordion-button\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                            Accordion Item #1\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                            Accordion Item #2\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <div className=\"accordion-item\">\r\n                    <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                        <button className=\"accordion-button collapsed\" style={myStyle} type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                            Accordion Item #3\r\n                        </button>\r\n                    </h2>\r\n                    <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                        <div className=\"accordion-body\" style={myStyle}>\r\n                            <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <button onClick={toggleStyle} type=\"button\" className=\"btn btn-primary mt-2\">{btnText}</button>\r\n        </div>\r\n\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize = (word)=> {\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1); \r\n    }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n        <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n    </div>\r\n  )\r\n}\r\n","import './App.css';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\nimport About from './components/About';\nimport Alert from './components/Alert';\nimport React, { useState } from 'react';\nimport { BrowserRouter, Routes, Route } from 'react-router-dom';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message, type)=> {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  }\n  \n  const toggleMode = ()=>{\n    if(mode === 'light') {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\", \"success\");\n    }\n    else {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n    <Navbar title=\"TextUtils1\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} />\n    <Alert alert={alert}/>\n      <BrowserRouter>\n        <Routes>\n          <Route path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text to analyze\" mode={mode}/>} />\n          <Route path=\"about\" element={<About />} />\n        </Routes>\n      </BrowserRouter>\n    </>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}